["beeai-platform:start"]
depends = ["beeai-server:build"]
dir = "{{config_root}}"
run = """
#!/bin/bash
set -e

UI_IMPORT=""
UI_TAG=""

if [[ ! "$*" =~ 'ui.enabled=false' ]]; then
    {{ mise_bin }} run beeai-ui:build:image
    UI_IMPORT="--import ghcr.io/i-am-bee/beeai-platform/beeai-ui:local"
    UI_TAG="--set ui.image.tag=local"
fi

{{ mise_bin }} run beeai-cli:run -- platform start \
    --import "ghcr.io/i-am-bee/beeai-platform/beeai-server:local" \
    $UI_IMPORT \
    --set image.tag=local \
    $UI_TAG "$@"
"""

["beeai-platform:delete"]
run = "{{ mise_bin }} run beeai-cli:run -- platform delete"

["beeai-platform:stop"]
run = "{{ mise_bin }} run beeai-cli:run -- platform stop"


["beeai-platform:stop-all"]
run = """
#!/bin/bash
# Stop all lima VMs

EXCEPT='{{option(name="except", default="")}}'

{% raw %}
TO_DELETE="$(LIMA_HOME=~/.beeai/lima limactl list -f '{{.Name}}' 2>/dev/null | sed '/^[^a-z]*$/d' | sed "/^$EXCEPT$/d")"
{% endraw %}

{% raw %}
echo "$TO_DELETE" | xargs -rn 1 -I"{}" mise run beeai-cli:run -- platform stop --vm-name="{}"
{% endraw %}
"""

["beeai-platform:shell"]
raw = true
shell = "echo"
dir = "{{cwd}}"
run = """
deactivate () {
  export PS1="$__OLD_PS1"

  # Restore LIMA_HOME to its original state (set or unset)
  [[ -n "$__OLD_LIMA_HOME" ]] && export LIMA_HOME="$__OLD_LIMA_HOME" || unset LIMA_HOME
  [[ -n "$__OLD_KUBECONFIG" ]] && export KUBECONFIG="$__OLD_KUBECONFIG" || unset KUBECONFIG

  # Clean up the backup values
  unset __OLD_PS1
  unset __OLD_LIMA_HOME
  unset __OLD_KUBECONFIG
  unset -f deactivate
  echo "Environment for '$VM_NAME' deactivated."
}

while [[ -n "$__OLD_PS1" ]]; do
  deactivate;
done

VM_NAME={{option(name="vm-name", default="beeai-platform")}}
echo "Activating environment for '$VM_NAME'..."

export __OLD_PS1="$PS1"
export __OLD_LIMA_HOME="$LIMA_HOME"
export __OLD_KUBECONFIG="$KUBECONFIG"

export KUBECONFIG="${HOME}/.beeai/lima/${VM_NAME}/copied-from-guest/kubeconfig.yaml"
export LIMA_HOME=~/.beeai/lima
export PS1="(${VM_NAME}) ${__OLD_PS1}"

"""


["beeai-platform:release"]
description = "Bump version across all platform components and sync dependencies"
usage = '''
arg "version" "must follow pattern 1.2.3[-rc4]"
'''

run = """
#!/bin/bash
set -e

# Get the new version from argument
NEW_VERSION="{{arg(name='version')}}"

# Validate version format
if ! [[ "$NEW_VERSION" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+(-rc[0-9]+)?$ ]]; then
    echo "ERROR: Invalid version format. Use #.#.# or #.#.#-rc#"
    echo "Examples: 1.2.3, 0.2.15-rc6"
    exit 1
fi

echo "Bumping version to $NEW_VERSION"

# Python projects - using toml set to preserve version format
echo "Updating Python projects..."
cd apps/beeai-cli && toml set 'project.version' "$NEW_VERSION" --toml-path pyproject.toml && uv lock
cd ../beeai-server && toml set 'project.version' "$NEW_VERSION" --toml-path pyproject.toml && uv lock
cd ../../

# Node.js projects - using npm to update package.json files
echo "Updating Node.js projects..."
cd apps/beeai-ui && npm version "$NEW_VERSION" --no-git-tag-version
cd ../beeai-web && npm version "$NEW_VERSION" --no-git-tag-version
cd ../../

# Update Helm Chart using yq (multi-platform)
echo "Updating Helm chart..."
yq -i ".version = \\"$NEW_VERSION\\"" helm/Chart.yaml
yq -i ".appVersion = \\"$NEW_VERSION\\"" helm/Chart.yaml

# Sync dependencies using mise tasks
echo "Syncing dependencies..."
{{ mise_bin }} run beeai-cli:setup
{{ mise_bin }} run beeai-server:setup
{{ mise_bin }} run common:setup:pnpm

echo "Version bump to $NEW_VERSION completed successfully!"
echo "Dependencies synchronized for all projects."

# Add files to git staging
git add helm/Chart.yaml apps/beeai-{cli,server}/{uv.lock,pyproject.toml} apps/beeai-{ui,web}/package.json

echo ""
echo "Changes made:"
git diff --cached

# Ask user if they want to commit and push
read -p "Create commit and push to main? [Y/n] " confirm
if [[ "${confirm:-y}" =~ ^[Yy]$ ]]; then
    git commit -m "release: v$NEW_VERSION" -s
    git tag "v$NEW_VERSION"
    git push --atomic origin main "v$NEW_VERSION"
    echo "Successfully committed and pushed version v$NEW_VERSION"
else
    echo "Changes staged but not committed. You can commit manually with:"
    echo "  git commit -m 'release: v$NEW_VERSION'" -s
    echo "  git tag 'v$NEW_VERSION'"
    echo "  git push --atomic origin main 'v$NEW_VERSION'"
fi

"""